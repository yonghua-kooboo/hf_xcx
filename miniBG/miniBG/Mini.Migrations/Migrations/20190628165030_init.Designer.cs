// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mini.Migrations;

namespace Mini.Migrations.Migrations
{
    [DbContext(typeof(MigrationContext))]
    [Migration("20190628165030_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Mini.Data.BaseData", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Icon");

                    b.Property<string>("IsDefault");

                    b.Property<string>("Key");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("Mini_BaseData");
                });

            modelBuilder.Entity("Mini.Data.Entity.Address", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("AddressType");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Province");

                    b.Property<string>("Street");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("Mini_Addresss");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Address");
                });

            modelBuilder.Entity("Mini.Data.Entity.Customer", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("Birthday");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("NickName");

                    b.Property<string>("OpenID");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("Mini_Customers");
                });

            modelBuilder.Entity("Mini.Data.Entity.Order", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime?>("Complete");

                    b.Property<DateTime>("CreateTime");

                    b.Property<byte[]>("CustomerID")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<int>("OrderStatu");

                    b.Property<decimal>("Price");

                    b.Property<byte[]>("ProductID")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("SalonID")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SalonID");

                    b.ToTable("Mini_Orders");
                });

            modelBuilder.Entity("Mini.Data.Entity.Product", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<string>("Digist");

                    b.Property<bool>("Display");

                    b.Property<DateTime?>("End");

                    b.Property<decimal>("Price");

                    b.Property<byte[]>("ProductType")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<int>("SortIndex");

                    b.Property<DateTime?>("Start");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("Mini_Products");
                });

            modelBuilder.Entity("Mini.Data.Entity.ProductItem", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("Display");

                    b.Property<DateTime?>("End");

                    b.Property<int>("Price");

                    b.Property<byte[]>("ProductID")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime?>("Start");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Mini_ProductItems");
                });

            modelBuilder.Entity("Mini.Data.Entity.Salon", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<string>("Digist");

                    b.Property<DateTime?>("End");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("Start");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("Mini_Salons");
                });

            modelBuilder.Entity("Mini.Data.Entity.SalonItem", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("Display");

                    b.Property<int>("Price");

                    b.Property<byte[]>("SalonID")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("SalonID");

                    b.ToTable("Mini_SalonItems");
                });

            modelBuilder.Entity("Mini.Data.Entity.User", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<int>("ActiveStatu");

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("Birthday");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("Mini_Users");
                });

            modelBuilder.Entity("Mini.Data.Entity.CustomerAddress", b =>
                {
                    b.HasBaseType("Mini.Data.Entity.Address");

                    b.Property<byte[]>("CustomerID")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasIndex("CustomerID");

                    b.ToTable("Mini_CustomerAddresss");

                    b.HasDiscriminator().HasValue("CustomerAddress");
                });

            modelBuilder.Entity("Mini.Data.Entity.SalonAddress", b =>
                {
                    b.HasBaseType("Mini.Data.Entity.Address");

                    b.Property<string>("Compere");

                    b.Property<byte[]>("SalonID")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasIndex("SalonID");

                    b.ToTable("Mini_SalonAddresss");

                    b.HasDiscriminator().HasValue("SalonAddress");
                });

            modelBuilder.Entity("Mini.Data.Entity.Order", b =>
                {
                    b.HasOne("Mini.Data.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mini.Data.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.HasOne("Mini.Data.Entity.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonID");
                });

            modelBuilder.Entity("Mini.Data.Entity.ProductItem", b =>
                {
                    b.HasOne("Mini.Data.Entity.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mini.Data.Entity.SalonItem", b =>
                {
                    b.HasOne("Mini.Data.Entity.Salon", "Salon")
                        .WithMany("SalonItems")
                        .HasForeignKey("SalonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mini.Data.Entity.CustomerAddress", b =>
                {
                    b.HasOne("Mini.Data.Entity.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mini.Data.Entity.SalonAddress", b =>
                {
                    b.HasOne("Mini.Data.Entity.Salon", "Salon")
                        .WithMany("SalonAddresses")
                        .HasForeignKey("SalonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
